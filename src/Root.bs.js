// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";

function decodeItem(json) {
  return /* record */[
          /* idmessage */Json_decode.field("idmessage", Json_decode.string, json),
          /* texte */Json_decode.field("texte", Json_decode.string, json),
          /* dateenvoi */Json_decode.field("dateenvoi", Json_decode.string, json),
          /* idcours */Json_decode.field("idcours", Json_decode.string, json),
          /* auteur */Json_decode.field("auteur", Json_decode.string, json),
          /* nblikes */Json_decode.field("nblikes", Json_decode.string, json),
          /* isliked */Json_decode.field("isliked", Json_decode.string, json)
        ];
}

function decodeItemList(json) {
  return Json_decode.list((function (param) {
                return Json_decode.optional(decodeItem, param);
              }), json);
}

function getResults(query, uti) {
  return fetch("http://127.0.0.1:8080/message?cours=" + (query + ("&userId=" + uti))).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  return Promise.resolve(Json_decode.list((function (param) {
                                    return Json_decode.optional(decodeItem, param);
                                  }), json));
                })).then((function (results) {
                return Promise.resolve(List.map((function (item) {
                                  if (item !== undefined) {
                                    return item;
                                  } else {
                                    return /* record */[
                                            /* idmessage */"nada",
                                            /* texte */"",
                                            /* dateenvoi */"",
                                            /* idcours */"",
                                            /* auteur */"",
                                            /* nblikes */"",
                                            /* isliked */""
                                          ];
                                  }
                                }), results));
              }));
}

var Api = {
  decodeItem: decodeItem,
  decodeItemList: decodeItemList,
  getResults: getResults
};

function reducer(action, state) {
  if (typeof action === "number") {
    if (action === /* UpdateMes */0) {
      return /* Update */Block.__(0, [/* record */[
                  /* input */state[/* input */0],
                  /* utilisateur */state[/* utilisateur */1],
                  /* text */state[/* text */2],
                  /* isLoading */false,
                  /* results */state[/* results */4]
                ]]);
    } else {
      return /* UpdateWithSideEffects */Block.__(2, [
                /* record */[
                  /* input */state[/* input */0],
                  /* utilisateur */state[/* utilisateur */1],
                  /* text */state[/* text */2],
                  /* isLoading */false,
                  /* results */state[/* results */4]
                ],
                (function (self) {
                    var value = self[/* state */1][/* input */0];
                    var uti = self[/* state */1][/* utilisateur */1];
                    getResults(value, uti).then((function (results) {
                            Curry._1(self[/* send */3], /* UpdateResults */Block.__(2, [results]));
                            return Promise.resolve(/* () */0);
                          }));
                    return /* () */0;
                  })
              ]);
    }
  } else {
    switch (action.tag | 0) {
      case /* UpdateInput */0 :
          return /* Update */Block.__(0, [/* record */[
                      /* input */action[0],
                      /* utilisateur */action[1],
                      /* text */state[/* text */2],
                      /* isLoading */state[/* isLoading */3],
                      /* results */state[/* results */4]
                    ]]);
      case /* UpdateText */1 :
          return /* Update */Block.__(0, [/* record */[
                      /* input */state[/* input */0],
                      /* utilisateur */state[/* utilisateur */1],
                      /* text */action[0],
                      /* isLoading */state[/* isLoading */3],
                      /* results */state[/* results */4]
                    ]]);
      case /* UpdateResults */2 :
          return /* Update */Block.__(0, [/* record */[
                      /* input */state[/* input */0],
                      /* utilisateur */state[/* utilisateur */1],
                      /* text */state[/* text */2],
                      /* isLoading */false,
                      /* results */action[0]
                    ]]);
      
    }
  }
}

var initialAppState = /* record */[
  /* input */"",
  /* utilisateur */"",
  /* text */"",
  /* isLoading */false,
  /* results : [] */0
];

export {
  initialAppState ,
  Api ,
  reducer ,
  
}
/* No side effect */
